kind: pipeline
type: docker
name: default

steps:
- name: ssh
  image: appleboy/drone-ssh

  environment:
    USER:
      from_secret: GIT_USERNAME
    PASS:
      from_secret: GIT_PASSWORD
  settings:
    host:
      - s291.ok.ubc.ca
    username: deploy
    key:
      from_secret: DEPLOY_SSH_KEY
    port: 22
    command_timeout: 5m
    envs: [ PASS, USER ]
    script:
      ################################# Pull fresh github #################################
      - ls
      # Set permission to directory used to remove files
      # - sudo chown deploy hot-desking-deploy
      # Terminate all docker containers 
      - docker kill $(docker ps -q)
      # Remove all non-running containers
      - docker system prune -f
      # List all docker containers 
      - docker ps -a
      # TODO CLEAR DIRECTORY TO START FRESH TODO NEED HELP FROM REECE PERMISSION ISSUE WHEN TRYING TO DELETE LEFT OVER FILES FROM NODE MODULES
      # - rm -rf hot-desking-deploy
      # Clone Directory
      - git clone -b merge-projects-test https://$${USER}:$${PASS}@github.com/UBCO-COSC-499-Summer-2022/hot-desking-deploy.git test-pull5/
      - ls
      # change directories 
      - cd test-pull5/
      # Run Bash File to setup project
      - chmod 744 setup.sh
      - sh setup.sh

      - docker compose run --rm artisan schedule:list

      ################################# Pull new changes #################################
      # # Terminate all docker containers 
      # - docker kill $(docker ps -q)
      # # Remove all non-running containers
      # - docker system prune -f
      # # List all docker containers 
      # - docker ps -a
      # # change directories
      # - cd test-pull5/
      # # fetch new changes Directory
      # - git fetch
      # - git pull
      # # Run Bash File to setup project
      # - chmod 744 run.sh
      # - sh run.sh
      # # clear cache/config
      # - docker compose run --rm artisan cache:clear
      # - docker compose run --rm artisan config:clear
      # - docker compose run --rm artisan config:cache

      # - docker compose run --rm artisan schedule:list

      # # check if server has cron 
      # - service cron status

trigger:
  branch:
  - main
  event:
  - push
  status:
  - success